// this is comment
/* you know this is what */

this is A // check the json by type A

int is number[this % 1 = 0]
uint is int[1 / this > 0]

A is {
    a: boolean,
    b: number = 0, // default value
    c: string, // trailing comma
}
A[c = 'hello'] is B or C // check more

B is A and {
    d = true, // type infer. boolean in this case
    e: number = true, // throws error
    f = {
        a: true,
        c: 'hello'
    }, // inferred as { a: boolean, c: string }
    g: A = {
        a: true,
        // default value must have all fields
        c: 'hello'
    }, // throws error
    h: A = {
        a: true,
        b: 0,
        c: 'hello'
    }, // throws error
       // because A[c = 'hello'] is B or C
    i: A = {
        a: true,
        b: 0,
        c: 'hi'
    } // ok
}

C is {
    j: any, // but not undefined
    k: *, // allow undefined
    l: number,
    m: void, // check undefined
}
C[l < 1] throws 'your message'

Fruit is ('apple', 'banana', 'orange') // one value in the list

FirstIsIntSecondIsStringArray is [int, string] // tuple
FirstIsIntSecondIsStringArray[length > 2] throws 'too many'

uint_array is [uint, ...]
int_uint_pattern_array is [int, uint, ...]

unique_pattern_array is [int, uint, unique...] // [1, 2, 1, 3] // ok
                                               // [1, 2, 1, 2] // not ok

phone_number is /[0-9]+-[0-9]+-[0-9]+/i // check by regex

no_newline is not /\r|\n/g

uuid is unique string

Parent is {
    c: Child
}

Parent::Child is unique int // only unique in Parent instances
